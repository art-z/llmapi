from fastapi import FastAPI, Depends
from sqlalchemy.ext.asyncio import AsyncSession
from .db import Base, engine, async_session
from .models import Message
from .schemas import MessageCreate, MessageRead
from .client import ask_yandex_gpt

app = FastAPI()

@app.on_event("startup")
async def on_startup():
    async with engine.begin() as conn:
        await conn.run_sync(Base.metadata.create_all)

async def get_session() -> AsyncSession:
    async with async_session() as session:
        yield session

@app.post("/chat", response_model=MessageRead)
async def chat(msg: MessageCreate, session: AsyncSession = Depends(get_session)):

    response = await ask_yandex_gpt(msg.prompt)

    db_msg = Message(prompt=msg.prompt, response=response)
    session.add(db_msg)
    await session.commit()
    await session.refresh(db_msg)

    return db_msg
